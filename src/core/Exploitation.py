# Exploitation.py

import subprocess
import logging
from abc import ABC, abstractmethod
import json

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class ExploitResult:
    """
    Class to encapsulate the result of an exploitation attempt.
    Stores details about success/failure, the command executed, and the resulting output.
    """
    def __init__(self, target, exploit_name, success, raw_output):
        self.target = target
        self.exploit_name = exploit_name
        self.success = success
        self.raw_output = raw_output

    def to_json(self):
        """
        Converts the result of the exploitation attempt to a JSON representation.
        """
        return json.dumps({
            'target': self.target,
            'exploit_name': self.exploit_name,
            'success': self.success,
            'raw_output': self.raw_output
        }, indent=4)

    def __str__(self):
        return f"ExploitResult(target={self.target}, exploit={self.exploit_name}, success={self.success})"


class Exploiter(ABC):
    """
    Abstract base class for exploiters. Defines the common interface for running exploits.
    Different exploiters can inherit and implement the run_exploit method.
    """
    def __init__(self, target, vulnerability):
        self.target = target
        self.vulnerability = vulnerability

    @abstractmethod
    def run_exploit(self):
        """
        Abstract method to run an exploit against the target based on the identified vulnerability.
        """
        pass


class CVEExploiter(Exploiter):
    """
    A concrete implementation of Exploiter that runs CVE-based exploits.
    Integrates with tools like Metasploit to automate exploit execution.
    """
    def __init__(self, target, vulnerability, exploit_tool="metasploit"):
        super().__init__(target, vulnerability)
        self.exploit_tool = exploit_tool

    def run_exploit(self):
        """
        Runs a CVE-based exploit using the specified tool (e.g., Metasploit, custom Python scripts).
        Returns an ExploitResult instance with details on success/failure.
        """
        cve_id = self.vulnerability.get("id")
        logging.info(f"Attempting to exploit CVE {cve_id} on target {self.target} using {self.exploit_tool}")

        if self.exploit_tool == "metasploit":
            # Example command (in a real-world scenario, this might be an actual Metasploit call)
            command = f"msfconsole -x 'use exploit/{cve_id}; set RHOST {self.target}; run'"
        else:
            # For custom exploits, use a predefined script path
            command = f"python3 exploits/{cve_id}.py --target {self.target}"

        try:
            # Execute the exploit command
            raw_output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
            logging.info(f"Exploit for {cve_id} executed successfully.")
            return ExploitResult(self.target, cve_id, success=True, raw_output=raw_output)
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to execute exploit {cve_id} on {self.target}: {e}")
            return ExploitResult(self.target, cve_id, success=False, raw_output=str(e))
