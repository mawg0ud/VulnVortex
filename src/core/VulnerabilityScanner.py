import requests
import logging
import json
from abc import ABC, abstractmethod

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class VulnerabilityDatabase(ABC):
    """
    Abstract base class for vulnerability databases. 
    Provides an interface to query vulnerabilities from different sources (e.g., CVE, custom DB).
    """
    def __init__(self, db_url):
        self.db_url = db_url

    @abstractmethod
    def query(self, identifier):
        """
        Abstract method to query vulnerability details by identifier (e.g., CVE ID, custom ID).
        """
        pass


class CVEDatabase(VulnerabilityDatabase):
    """
    Concrete implementation of VulnerabilityDatabase for querying CVEs from public APIs.
    """
    def __init__(self, db_url="https://cve.circl.lu/api/cve/"):
        super().__init__(db_url)

    def query(self, cve_id):
        """
        Queries the CVE database for a specific CVE ID and returns its details.
        """
        logging.info(f"Querying CVE Database for {cve_id}")
        try:
            response = requests.get(f"{self.db_url}{cve_id}")
            if response.status_code == 200:
                return response.json()
            else:
                logging.error(f"Failed to fetch CVE data for {cve_id}: {response.status_code}")
                return None
        except requests.RequestException as e:
            logging.error(f"Error querying CVE Database: {e}")
            return None


class VulnerabilityScanner(ABC):
    """
    Abstract base class for all types of vulnerability scanners.
    Defines the common interface for scanning and assessing vulnerabilities.
    """
    def __init__(self, target):
        self.target = target
        self.vulnerabilities = []

    @abstractmethod
    def scan(self):
        """
        Abstract method to perform the vulnerability scan.
        Each specific scanner will implement this method.
        """
        pass

    def assess_risk(self, vulnerability):
        """
        Abstract method for assessing the risk level of a vulnerability.
        To be implemented by subclasses depending on specific criteria.
        """
        raise NotImplementedError("Risk assessment method must be implemented by subclasses")


class CVEVulnerabilityScanner(VulnerabilityScanner):
    """
    Concrete implementation of VulnerabilityScanner that checks the target for known CVEs.
    Integrates with the CVE Database to query known vulnerabilities.
    """
    def __init__(self, target, db_instance=None):
        super().__init__(target)
        # Use a default CVE database instance if none is provided
        self.db_instance = db_instance or CVEDatabase()

    def scan(self):
        """
        Simulates scanning the target for CVEs (in a real implementation, this could involve 
        querying a database or analyzing system information). Here we assume some predefined CVEs.
        """
        logging.info(f"Scanning target {self.target} for known CVEs...")

        # Simulating vulnerability scanning (e.g., found these hypothetical CVEs on the system)
        found_cves = ['CVE-2021-34527', 'CVE-2019-0708']  # Sample CVE IDs
        for cve in found_cves:
            details = self.db_instance.query(cve)
            if details:
                self.vulnerabilities.append(details)
                self.assess_risk(details)

        return self.vulnerabilities

    def assess_risk(self, vulnerability):
        """
        Assess the risk of the found vulnerability based on its CVSS score (if available).
        This is a simplistic risk assessment using CVSS (Common Vulnerability Scoring System).
        """
        cvss_score = vulnerability.get('cvss', {}).get('score', 0)
        if cvss_score >= 9:
            risk_level = 'Critical'
        elif cvss_score >= 7:
            risk_level = 'High'
        elif cvss_score >= 4:
            risk_level = 'Medium'
        else:
            risk_level = 'Low'

        vulnerability['risk_level'] = risk_level
        logging.info(f"Vulnerability {vulnerability['id']} assessed as {risk_level} risk.")
        class CustomVulnerabilityScanner(VulnerabilityScanner):
    """
    A customizable vulnerability scanner that allows users to define their own vulnerability checks.
    This could include custom scripts, databases, or heuristics for detecting vulnerabilities.
    """
    def __init__(self, target, custom_rules):
        super().__init__(target)
        self.custom_rules = custom_rules

    def scan(self):
        """
        Scans the target based on custom rules provided during initialization.
        """
        logging.info(f"Scanning target {self.target} using custom rules...")

        for rule in self.custom_rules:
            result = self.apply_rule(rule)
            if result:
                self.vulnerabilities.append(result)
                self.assess_risk(result)

        return self.vulnerabilities

    def apply_rule(self, rule):
        """
        Apply a custom rule to the target and return vulnerability details if a match is found.
        """
        # Simulated rule application logic (in a real system, this could be complex)
        logging.info(f"Applying rule: {rule['name']} to target {self.target}")
        # For demonstration, assume a match on one rule
        if rule['name'] == "ExampleRule":
            return {
                "id": "CUSTOM-001",
                "description": "Example vulnerability detected",
                "severity": "High",
                "recommendation": "Patch immediately"
            }
        return None

    def assess_risk(self, vulnerability):
        """
        Custom risk assessment based on severity provided by the custom rule.
        """
        severity = vulnerability.get('severity', 'Low')
        risk_level = 'Low'

        if severity == 'Critical':
            risk_level = 'Critical'
        elif severity == 'High':
            risk_level = 'High'
        elif severity == 'Medium':
            risk_level = 'Medium'

        vulnerability['risk_level'] = risk_level
        logging.info(f"Custom vulnerability {vulnerability['id']} assessed as {risk_level} risk.")


class VulnerabilityReport:
    """
    A class to generate reports based on the scanned vulnerabilities.
    Supports different formats like JSON, HTML, or plain text.
    """
    def __init__(self, vulnerabilities):
        self.vulnerabilities = vulnerabilities

    def to_json(self):
        """
        Converts the vulnerability list into a JSON report.
        """
        return json.dumps(self.vulnerabilities, indent=4)

    def to_html(self):
        """
        Converts the vulnerability list into an HTML report.
        """
        html_report = "<html><body><h1>Vulnerability Report</h1><ul>"
        for vulnerability in self.vulnerabilities:
            html_report += f"<li>{vulnerability['id']}: {vulnerability['description']} - Risk Level: {vulnerability['risk_level']}</li>"
        html_report += "</ul></body></html>"
        return html_report
