import unittest
import json
from Exploitation import ExploitManager

class TestExploitManager(unittest.TestCase):
    
    def setUp(self):
        """Set up for each test case with valid data."""
        self.target = "192.168.1.1"
        with open("valid_vulns.json", "r") as f:
            self.vulnerabilities = json.load(f)

    def test_run_exploits(self):
        """Test running exploits against vulnerabilities."""
        exploit_manager = ExploitManager(self.target, self.vulnerabilities)
        results = exploit_manager.run_exploits()
        self.assertGreater(len(results), 0, "At least one exploit result should be generated")
    
    def test_exploit_format(self):
        """Test if the exploit results are in correct format."""
        exploit_manager = ExploitManager(self.target, self.vulnerabilities)
        results = exploit_manager.run_exploits()
        for result in results:
            self.assertIn("vulnerability_id", result.to_json(), "Result must have a vulnerability_id")
            self.assertIn("status", result.to_json(), "Result must have a status field")
    
    def test_empty_vulns_list(self):
        """Test handling of an empty vulnerabilities list."""
        exploit_manager = ExploitManager(self.target, [])
        results = exploit_manager.run_exploits()
        self.assertEqual(len(results), 0, "No exploits should run with an empty vulnerabilities list")
    
    def test_invalid_target(self):
        """Test handling of an invalid target."""
        with self.assertRaises(ValueError):
            exploit_manager = ExploitManager("999.999.999.999", self.vulnerabilities)
            exploit_manager.run_exploits()

if __name__ == '__main__':
    unittest.main()
