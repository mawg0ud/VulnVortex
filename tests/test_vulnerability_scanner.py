import unittest
from VulnerabilityScanner import VulnerabilityScanner

class TestVulnerabilityScanner(unittest.TestCase):
    
    def test_detect_vulnerabilities_valid_scan(self):
        """Test detecting vulnerabilities with valid scan input."""
        scanner = VulnerabilityScanner("192.168.1.1", "valid_scan_results.json")
        vulns = scanner.detect_vulnerabilities()
        self.assertGreater(len(vulns), 0, "There should be detected vulnerabilities")

    def test_no_vulnerabilities(self):
        """Test with a scan result that contains no vulnerabilities."""
        scanner = VulnerabilityScanner("192.168.1.1", "no_vulnerabilities.json")
        vulns = scanner.detect_vulnerabilities()
        self.assertEqual(len(vulns), 0, "No vulnerabilities should be found")

    def test_invalid_scan_file(self):
        """Test handling of invalid scan result file."""
        scanner = VulnerabilityScanner("192.168.1.1", "invalid_file.json")
        with self.assertRaises(FileNotFoundError):
            scanner.detect_vulnerabilities()

    def test_vuln_detection_format(self):
        """Test if the vulnerability output is in correct format."""
        scanner = VulnerabilityScanner("192.168.1.1", "valid_scan_results.json")
        vulns = scanner.detect_vulnerabilities()
        self.assertIsInstance(vulns, list, "Vulnerabilities should be returned as a list")

if __name__ == '__main__':
    unittest.main()
